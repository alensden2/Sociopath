/**
 * This code is creating a Redux slice using the createSlice function from the @reduxjs/toolkit library.
 *  A Redux slice is a collection of Redux-related functionality for a specific feature or domain of your application's state.
 * The initialState object defines the initial state of the slice, which has properties for mode, user, token, and posts.
 * The createSlice function takes an object with three properties: name: a string that identifies the slice of state.
 * initialState: the initial state of the slice.
 * reducers: an object containing functions that create actions to modify the state.
 * In this case, the reducers object contains several functions that create actions that can modify the state:
 * setMode: sets the mode property to "light" if it is currently "dark", and vice versa.
 * setLogin: sets the user and token properties to values provided in the action's payload.
 * setLogout: sets the user and token properties to null.
 * setFriends: sets the friends property of the user object to the friends array provided in the action's payload.
 * setPosts: sets the posts property to the posts array provided in the action's payload.
 * setPost: updates a specific post in the posts array with the post provided in the action's payload.
 * The authSlice.actions object contains the action creators generated by
 * createSlice for each of the reducers defined in the reducers object.
 * Finally, authSlice.reducer is the reducer function that is created by createSlice,
 *  which can be used to update the state of the slice in response to actions dispatched by the application.
 * Overall, this code creates a Redux slice that defines the state and actions for
 * authentication-related functionality in a React application
 */
import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  mode: "light",
  user: null,
  token: null,
  posts: [],
};

export const authSlice = createSlice({
  name: "auth",
  initialState,
  reducers: {
    setMode: (state) => {
      state.mode = state.mode === "light" ? "dark" : "light";
    },
    setLogin: (state, action) => {
      state.user = action.payload.user;
      state.token = action.payload.token;
    },
    setLogout: (state) => {
      state.user = null;
      state.token = null;
    },
    setFriends: (state, action) => {
      if (state.user) {
        state.user.friends = action.payload.friends;
      } else {
        console.error("user friends non-existent");
      }
    },
    setPosts: (state, action) => {
      state.posts = action.payload.posts;
    },
    setPost: (state, action) => {
      const updatedPosts = state.posts.map((post) => {
        if (post.id === action.payload.post._id) return action.payload.post;
        return post;
      });

      state.posts = updatedPosts;
    },
  },
});

export const { setMode, setLogin, setLogout, setFriends, setPosts, setPost } =
  authSlice.actions;

export default authSlice.reducer;

// like core state in ng, this has state is accessable to all the components in the scope of the react app
